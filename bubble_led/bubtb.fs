( MINSTREL 4TH VERSION OF TOOLBOX FOR RC2014 BUBBLE LED MODULE )
( PORTED FROM ORIGINAL VERSION WRITTEN BY SHIELA DIXON )
( SEE https://github.com/shieladixon/Bubble-display-toolbox )
( PORTED BY GEORGE BECKETT <MARKGBECKETT@GMAIL.COM> )
( VERSION 1.00 - INITIAL PORT, 25/JUL/21 )
( VERSION 1.01 - OPTIMISATIONS FOR ACE FORTH, 26/JUL/21 )

00 CONSTANT DIGIT_SELECT_PORT
02 CONSTANT SEGMENT_PORT
02 CONSTANT ON_TIME
08 CONSTANT SCROLL_SPEED

CREATE FONT
  0 C, ( SPACE )
128 C, ( DP )
 63 C,   6 C,  91 C,  79 C, 102 C, ( DIGITS, 0 - 9 )
109 C, 125 C,   7 C, 127 C, 111 C,
 95 C, 124 C,  57 C,  94 C, 121 C, ( A/A - Z/Z )
113 C, 111 C, 116 C,  48 C,  30 C, ( -J )
117 C,  56 C,  21 C,  55 C,  63 C, ( -O )
115 C, 103 C,  49 C, 109 C, 120 C, ( -T )
 62 C,  62 C,  42 C, 118 C, 110 C, 91 C, ( -Z )
 64 C,  83 C,   2 C,

CREATE DISPLAY_BUFFER 8 ALLOT

( WAIT N MILLISECONDS , BASED ON 6.5 MHZ CLOCK )
( SET LIMIT ON INNER LOOP TO 4 FOR 3.25 MHZ CLOCK )
: MS ( N -- )
    0 DO
	8 0 DO
	LOOP
    LOOP
;

( LOOKUP TABLE TO QUICKLY WORK OUT POWERS OF TWO )
CREATE POWERT 1 C, 2 C, 4 C, 8 C, 16 C, 32 C, 64 C, 128 C,

( ALTERNATIVE, ARITHMETIC FORM )
: POWER ( M N -- M^N )
    DUP
    0 > IF
	1 SWAP 0 DO
	    OVER *
	LOOP
	SWAP
	DROP
    ELSE
	DROP DROP 1
    THEN
;

: >= ( N1 N2 -- F )
    1- >
;

: SELECT_DIGIT ( N -- )
    DIGIT_SELECT_PORT OUT
;

: SEND_DATA ( N -- )
    SEGMENT_PORT OUT
;

: SENDCHAR ( N -- )
    FONT + C@ SENDDATA
;

: ASCII_TO_SCREEN_CODE ( N -- N )
    ( COUPLE SPECIAL CHARS TO PUT AFTER Z )
    DUP 45 = IF ( - )
	78 +
    THEN
    
    DUP 63 = IF ( ? )
	61 +
    THEN

    DUP 39 = IF ( ' )
	86 +
    THEN
    
    DUP 44 = IF ( ,  MAKE IT A DP )
	2 +
    THEN
    
    DUP 96 > IF
	32 - ( 97 -> BECOMES 65 ->, MAKING ALL ALPHA CHARS UPPERCASE )
    THEN
    
    DUP 64 > IF
	7 - ( 65 -> BECOMES 58 ->, PUTTING ALPHA CHARS DIRECTLY ABOVE )
	( NUMBERS )
    THEN  
    
    DUP 46 = IF
	1 + ( SPECIAL CASE, PUT DP IMMEDIATELY BELOW NUMBERS [MAKE 47] )
    THEN
    
    DUP 32 = IF
	14 + ( SPECIAL CASE, PUT SPACE BELOW DP [MAKE 46] )
    THEN
    
    ( EVERYTHING NOW STARTS AT 47; SPC, DP, NUMBERS, ALPHA )
    46 -

    ( REPLACE OUT-OF-RANGE CHARACTERS BY SPACE )
    DUP 40 > IF
	DROP 0 ( MAKE ZERO )
    THEN
    
    DUP 0 < IF
	DROP 0 ( MAKE ZERO )
    THEN    
;


: SENDSCTOD ( C D -- ) 
    ( 2 SWAP POWER )
    POWERT + @ ( CONVERT DIGIT FROM 0-7 TO 1-128 )
    
    SELECTDIGIT
    
    SENDCHAR
;

: FLUSH_DISPLAY_BUFFER
    8 0 DO 
	( I IS 0 - 7  )
	DISPLAY_BUFFER I + C@ ( GET SCREENCODE FROM BUFFER AT POS I )
	I  ( OUR DIGIT # )
	
	SENDSCTOD

	ON_TIME MS ( DELAY BEFORE PRESENTING NEXT DIGIT )
	
	0 I SENDSCTOD ( SEND SPACE - REDUCES GHOSTING WHEN SCROLLING )
    LOOP
;

: PUT_CHAR_AT_INDEX ( C I -- )
    ( CHAR IS ASCII, CONVERTED TO SCREEN CODE FOR DISPLAY BUFFER )
    ( INDEX 0-7 )
    SWAP ASCII_TO_SCREEN_CODE SWAP
    DISPLAY_BUFFER + C!  
;

( CODE BELOW THIS COMMENT IS FROM SCROLLINP.FS )

( BUFFER FOR A MESSAGE UP TO 256 CHARACTERS )
CREATE MESSAGE 256 ALLOT

( BLANK ANY PREVIOUS MESSAGE DATA )
: INITMESSAGE
    256 0 DO
	MESSAGE I + 32 SWAP C!
    LOOP
;

0 VARIABLE SCROLL_COUNTDOWN 
0 VARIABLE MESSAGE_LEN
0 VARIABLE MESSAGE_CURSOR

: RESET_SCROLL_COUNTDOWN SCROLL_SPEED SCROLL_COUNTDOWN ! ;

: MESSAGE_CHAR_AT_POSITION ( P -- C )
    MESSAGE + C@
;

: SET_MESSAGE ( A N -- )
    DUP MESSAGE_LEN !
    0 DO
	DUP I + C@
	MESSAGE I + C!
    LOOP
;

: MESSAGE_TO_BUFFER ( -- )
    ( COPIES A SUBSTRING OF OUR MESSAGE TO THE SCREEN BUFFER )
    ( USING PUT_CHAR_AT_INDEX )
    8 0 DO 
	( I IS 0 - 7 )
	MESSAGE_CURSOR @ I + 
	DUP
	MESSAGE_LEN @ >= IF ( OFF THE END? )
	    MESSAGE_LEN @ - 
	THEN

	MESSAGE_CHAR_AT_POSITION I PUT_CHAR_AT_INDEX
    LOOP 
;


: SCROLL_MESSAGE ( -- )
    SCROLL_COUNTDOWN @ 1-
    DUP
    SCROLL_COUNTDOWN ! ( DEC LEAVING VALUE ON STACK )

    0 = IF 
	MESSAGE_CURSOR @ 1+
	DUP
	MESSAGE_CURSOR ! ( INC LEAVING VALUE ON STACK )
	MESSAGE_LEN @ = IF
	    0 MESSAGE_CURSOR !
	THEN
	
	MESSAGE_TO_BUFFER 

	RESET_SCROLL_COUNTDOWN
    THEN
;


: ESCAPE?
    INKEY
    65 = ( SHIFT-A )
;

: INITIALISATION ( -- )
    RESET_SCROLL_COUNTDOWN
    0 MESSAGE_CURSOR !
    MESSAGE_TO_BUFFER 
;

( WAIT FOR KEY PRESS )
: KEY ( -- N )
    ( START BY MAKING SURE NO PREVIOUS KEY PRESSES )
    BEGIN
	INKEY
	0=
    UNTIL

    ( NOW WAIT FOR KEYPRESS )
    BEGIN INKEY
	?DUP
    UNTIL
;

: INPUT
    0 ( TRACK OUR POSITION / COUNT CHARS )
    BEGIN
	KEY
	DUP 13 - ( RETURN CONFIRMS END OF MESSAGE )
	IF
	    OVER
	    254 < ( SAFEGUARD AGAINST >254 CHARS )
	    IF
		DUP EMIT DUP 3 PICK
		MESSAGE + C! ( POKE OUR CHAR VALUE INTO MESSAGE )
		SWAP
		1+ ( INC THE COUNTER )
		SWAP
	    THEN
	THEN
	13 =
    UNTIL

    ( ADD A COUPLE OF SPACES AS THE USER PROBABLY HASN'T )
    32 OVER MESSAGE + C! 
    1+ MESSAGE_LEN !
;

: SCROLLINP ( -- ) 
    INITMESSAGE
    INITIALISATION
    
    CR
    ." TYPE YOUR MESSAGE... YOU HAVE UP"
    ." TO 256 CHARACTERS. CHOOSE WISELY" 
    CR
    
    INPUT
    
    
    CR
    ." (SHIFT-A TO QUIT)" 
    CR
    
    BEGIN ( MAIN PROG LOOP IS HERE )
	FLUSH_DISPLAY_BUFFER 
	SCROLL_MESSAGE
	ESCAPE?
    UNTIL
;
